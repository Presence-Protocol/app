/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as PoapNFTImageContractJson } from "../PoapNFTImage.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";
import { Trait, AllStructs } from "./types";

// Custom types for the contract
export namespace PoapNFTImageTypes {
  export type Fields = {
    image: HexString;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getImage: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    getImage: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  PoapNFTImageInstance,
  PoapNFTImageTypes.Fields
> {
  encodeFields(fields: PoapNFTImageTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  at(address: string): PoapNFTImageInstance {
    return new PoapNFTImageInstance(address);
  }

  tests = {
    getImage: async (
      params: Omit<
        TestContractParamsWithoutMaps<PoapNFTImageTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getImage", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: PoapNFTImageTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const PoapNFTImage = new Factory(
  Contract.fromJson(
    PoapNFTImageContractJson,
    "",
    "c80acc8866ae1fd6be13cd12386890033f5a5c08f89cf653328e3281a07d0036",
    AllStructs
  )
);
registerContract(PoapNFTImage);

// Use this class to interact with the blockchain
export class PoapNFTImageInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<PoapNFTImageTypes.State> {
    return fetchContractState(PoapNFTImage, this);
  }

  view = {
    getImage: async (
      params?: PoapNFTImageTypes.CallMethodParams<"getImage">
    ): Promise<PoapNFTImageTypes.CallMethodResult<"getImage">> => {
      return callMethod(
        PoapNFTImage,
        this,
        "getImage",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    getImage: async (
      params: PoapNFTImageTypes.SignExecuteMethodParams<"getImage">
    ): Promise<PoapNFTImageTypes.SignExecuteMethodResult<"getImage">> => {
      return signExecuteMethod(PoapNFTImage, this, "getImage", params);
    },
  };

  async multicall<Calls extends PoapNFTImageTypes.MultiCallParams>(
    calls: Calls
  ): Promise<PoapNFTImageTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends PoapNFTImageTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<PoapNFTImageTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | PoapNFTImageTypes.MultiCallParams
      | PoapNFTImageTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      PoapNFTImage,
      this,
      callss,
      getContractByCodeHash
    );
  }
}
