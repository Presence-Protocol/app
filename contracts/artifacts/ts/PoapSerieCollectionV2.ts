/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as PoapSerieCollectionV2ContractJson } from "../V2/series/PoapSerieCollectionV2.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";
import { Trait, AllStructs } from "./types";
import { RalphMap } from "@alephium/web3";

// Custom types for the contract
export namespace PoapSerieCollectionV2Types {
  export type Fields = {
    nftTemplateId: HexString;
    poapDataTemplateId: HexString;
    organizer: Address;
    isPublicCollection: boolean;
    collectionImage: HexString;
    collectionName: HexString;
    collectionDescription: HexString;
    totalSupply: bigint;
    totalSupplySeries: bigint;
  };

  export type State = ContractState<Fields>;

  export type SerieAddedEvent = ContractEvent<{
    collectionId: HexString;
    eventId: bigint;
  }>;
  export type PoapMintedEvent = ContractEvent<{
    contractId: HexString;
    nftIndex: bigint;
    caller: Address;
    timestamp: bigint;
  }>;
  export type PoapParticipatedEvent = ContractEvent<{
    organizerAddress: Address;
    nftIndex: bigint;
    presenceAddressValidate: Address;
  }>;

  export interface CallMethodTable {
    getCollectionUri: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    totalSupply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    nftByIndex: {
      params: CallContractParams<{ index: bigint }>;
      result: CallContractResult<HexString>;
    };
    validateNFT: {
      params: CallContractParams<{ nftId: HexString; nftIndex: bigint }>;
      result: CallContractResult<null>;
    };
    convert: {
      params: CallContractParams<{ array: HexString }>;
      result: CallContractResult<HexString>;
    };
    mint: {
      params: CallContractParams<{
        eventId: bigint;
        amount: bigint;
        password: HexString;
      }>;
      result: CallContractResult<HexString>;
    };
    addNewEvent: {
      params: CallContractParams<{
        maxSupply: bigint;
        mintStartAt: bigint;
        mintEndAt: bigint;
        poapPrice: bigint;
        tokenIdPoap: HexString;
        isOpenPrice: boolean;
        tokenIdAirdrop: HexString;
        amountAirdropPerUser: bigint;
        airdropWhenHasParticipated: boolean;
        eventImage: HexString;
        eventName: HexString;
        description: HexString;
        location: HexString;
        eventStartAt: bigint;
        eventEndAt: bigint;
        isPublic: boolean;
        isBurnable: boolean;
        lockedUntil: bigint;
        hashedPassword: HexString;
      }>;
      result: CallContractResult<null>;
    };
    setParticipatedPresence: {
      params: CallContractParams<{
        eventId: bigint;
        nftIndex: bigint;
        presenceAddressValidate: Address;
      }>;
      result: CallContractResult<null>;
    };
    claimFunds: {
      params: CallContractParams<{ eventId: bigint; amountToClaim: bigint }>;
      result: CallContractResult<null>;
    };
    withdrawStorageFees: {
      params: CallContractParams<{ eventId: bigint; amount: bigint }>;
      result: CallContractResult<null>;
    };
    withdrawChainFees: {
      params: CallContractParams<{ eventId: bigint; amount: bigint }>;
      result: CallContractResult<null>;
    };
    depositStorageFees: {
      params: CallContractParams<{ eventId: bigint; amount: bigint }>;
      result: CallContractResult<null>;
    };
    depositChainFees: {
      params: CallContractParams<{ eventId: bigint; amount: bigint }>;
      result: CallContractResult<null>;
    };
    withdrawAirdrop: {
      params: CallContractParams<{ eventId: bigint; amount: bigint }>;
      result: CallContractResult<null>;
    };
    getOrganizer: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    isCollectionPublic: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<boolean>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    getCollectionUri: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    totalSupply: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    nftByIndex: {
      params: SignExecuteContractMethodParams<{ index: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    validateNFT: {
      params: SignExecuteContractMethodParams<{
        nftId: HexString;
        nftIndex: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    convert: {
      params: SignExecuteContractMethodParams<{ array: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    mint: {
      params: SignExecuteContractMethodParams<{
        eventId: bigint;
        amount: bigint;
        password: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    addNewEvent: {
      params: SignExecuteContractMethodParams<{
        maxSupply: bigint;
        mintStartAt: bigint;
        mintEndAt: bigint;
        poapPrice: bigint;
        tokenIdPoap: HexString;
        isOpenPrice: boolean;
        tokenIdAirdrop: HexString;
        amountAirdropPerUser: bigint;
        airdropWhenHasParticipated: boolean;
        eventImage: HexString;
        eventName: HexString;
        description: HexString;
        location: HexString;
        eventStartAt: bigint;
        eventEndAt: bigint;
        isPublic: boolean;
        isBurnable: boolean;
        lockedUntil: bigint;
        hashedPassword: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    setParticipatedPresence: {
      params: SignExecuteContractMethodParams<{
        eventId: bigint;
        nftIndex: bigint;
        presenceAddressValidate: Address;
      }>;
      result: SignExecuteScriptTxResult;
    };
    claimFunds: {
      params: SignExecuteContractMethodParams<{
        eventId: bigint;
        amountToClaim: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    withdrawStorageFees: {
      params: SignExecuteContractMethodParams<{
        eventId: bigint;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    withdrawChainFees: {
      params: SignExecuteContractMethodParams<{
        eventId: bigint;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    depositStorageFees: {
      params: SignExecuteContractMethodParams<{
        eventId: bigint;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    depositChainFees: {
      params: SignExecuteContractMethodParams<{
        eventId: bigint;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    withdrawAirdrop: {
      params: SignExecuteContractMethodParams<{
        eventId: bigint;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    getOrganizer: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    isCollectionPublic: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];

  export type Maps = { nftMetadata?: Map<bigint, HexString> };
}

class Factory extends ContractFactory<
  PoapSerieCollectionV2Instance,
  PoapSerieCollectionV2Types.Fields
> {
  encodeFields(fields: PoapSerieCollectionV2Types.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  eventIndex = { SerieAdded: 0, PoapMinted: 1, PoapParticipated: 2 };

  at(address: string): PoapSerieCollectionV2Instance {
    return new PoapSerieCollectionV2Instance(address);
  }

  tests = {
    getCollectionUri: async (
      params: Omit<
        TestContractParams<
          PoapSerieCollectionV2Types.Fields,
          never,
          PoapSerieCollectionV2Types.Maps
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<HexString, PoapSerieCollectionV2Types.Maps>
    > => {
      return testMethod(
        this,
        "getCollectionUri",
        params,
        getContractByCodeHash
      );
    },
    totalSupply: async (
      params: Omit<
        TestContractParams<
          PoapSerieCollectionV2Types.Fields,
          never,
          PoapSerieCollectionV2Types.Maps
        >,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint, PoapSerieCollectionV2Types.Maps>> => {
      return testMethod(this, "totalSupply", params, getContractByCodeHash);
    },
    nftByIndex: async (
      params: TestContractParams<
        PoapSerieCollectionV2Types.Fields,
        { index: bigint },
        PoapSerieCollectionV2Types.Maps
      >
    ): Promise<
      TestContractResult<HexString, PoapSerieCollectionV2Types.Maps>
    > => {
      return testMethod(this, "nftByIndex", params, getContractByCodeHash);
    },
    validateNFT: async (
      params: TestContractParams<
        PoapSerieCollectionV2Types.Fields,
        { nftId: HexString; nftIndex: bigint },
        PoapSerieCollectionV2Types.Maps
      >
    ): Promise<TestContractResult<null, PoapSerieCollectionV2Types.Maps>> => {
      return testMethod(this, "validateNFT", params, getContractByCodeHash);
    },
    convert: async (
      params: TestContractParams<
        PoapSerieCollectionV2Types.Fields,
        { array: HexString },
        PoapSerieCollectionV2Types.Maps
      >
    ): Promise<
      TestContractResult<HexString, PoapSerieCollectionV2Types.Maps>
    > => {
      return testMethod(this, "convert", params, getContractByCodeHash);
    },
    mint: async (
      params: TestContractParams<
        PoapSerieCollectionV2Types.Fields,
        { eventId: bigint; amount: bigint; password: HexString },
        PoapSerieCollectionV2Types.Maps
      >
    ): Promise<
      TestContractResult<HexString, PoapSerieCollectionV2Types.Maps>
    > => {
      return testMethod(this, "mint", params, getContractByCodeHash);
    },
    addNewEvent: async (
      params: TestContractParams<
        PoapSerieCollectionV2Types.Fields,
        {
          maxSupply: bigint;
          mintStartAt: bigint;
          mintEndAt: bigint;
          poapPrice: bigint;
          tokenIdPoap: HexString;
          isOpenPrice: boolean;
          tokenIdAirdrop: HexString;
          amountAirdropPerUser: bigint;
          airdropWhenHasParticipated: boolean;
          eventImage: HexString;
          eventName: HexString;
          description: HexString;
          location: HexString;
          eventStartAt: bigint;
          eventEndAt: bigint;
          isPublic: boolean;
          isBurnable: boolean;
          lockedUntil: bigint;
          hashedPassword: HexString;
        },
        PoapSerieCollectionV2Types.Maps
      >
    ): Promise<TestContractResult<null, PoapSerieCollectionV2Types.Maps>> => {
      return testMethod(this, "addNewEvent", params, getContractByCodeHash);
    },
    setParticipatedPresence: async (
      params: TestContractParams<
        PoapSerieCollectionV2Types.Fields,
        { eventId: bigint; nftIndex: bigint; presenceAddressValidate: Address },
        PoapSerieCollectionV2Types.Maps
      >
    ): Promise<TestContractResult<null, PoapSerieCollectionV2Types.Maps>> => {
      return testMethod(
        this,
        "setParticipatedPresence",
        params,
        getContractByCodeHash
      );
    },
    claimFunds: async (
      params: TestContractParams<
        PoapSerieCollectionV2Types.Fields,
        { eventId: bigint; amountToClaim: bigint },
        PoapSerieCollectionV2Types.Maps
      >
    ): Promise<TestContractResult<null, PoapSerieCollectionV2Types.Maps>> => {
      return testMethod(this, "claimFunds", params, getContractByCodeHash);
    },
    withdrawStorageFees: async (
      params: TestContractParams<
        PoapSerieCollectionV2Types.Fields,
        { eventId: bigint; amount: bigint },
        PoapSerieCollectionV2Types.Maps
      >
    ): Promise<TestContractResult<null, PoapSerieCollectionV2Types.Maps>> => {
      return testMethod(
        this,
        "withdrawStorageFees",
        params,
        getContractByCodeHash
      );
    },
    withdrawChainFees: async (
      params: TestContractParams<
        PoapSerieCollectionV2Types.Fields,
        { eventId: bigint; amount: bigint },
        PoapSerieCollectionV2Types.Maps
      >
    ): Promise<TestContractResult<null, PoapSerieCollectionV2Types.Maps>> => {
      return testMethod(
        this,
        "withdrawChainFees",
        params,
        getContractByCodeHash
      );
    },
    depositStorageFees: async (
      params: TestContractParams<
        PoapSerieCollectionV2Types.Fields,
        { eventId: bigint; amount: bigint },
        PoapSerieCollectionV2Types.Maps
      >
    ): Promise<TestContractResult<null, PoapSerieCollectionV2Types.Maps>> => {
      return testMethod(
        this,
        "depositStorageFees",
        params,
        getContractByCodeHash
      );
    },
    depositChainFees: async (
      params: TestContractParams<
        PoapSerieCollectionV2Types.Fields,
        { eventId: bigint; amount: bigint },
        PoapSerieCollectionV2Types.Maps
      >
    ): Promise<TestContractResult<null, PoapSerieCollectionV2Types.Maps>> => {
      return testMethod(
        this,
        "depositChainFees",
        params,
        getContractByCodeHash
      );
    },
    withdrawAirdrop: async (
      params: TestContractParams<
        PoapSerieCollectionV2Types.Fields,
        { eventId: bigint; amount: bigint },
        PoapSerieCollectionV2Types.Maps
      >
    ): Promise<TestContractResult<null, PoapSerieCollectionV2Types.Maps>> => {
      return testMethod(this, "withdrawAirdrop", params, getContractByCodeHash);
    },
    getOrganizer: async (
      params: Omit<
        TestContractParams<
          PoapSerieCollectionV2Types.Fields,
          never,
          PoapSerieCollectionV2Types.Maps
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<Address, PoapSerieCollectionV2Types.Maps>
    > => {
      return testMethod(this, "getOrganizer", params, getContractByCodeHash);
    },
    isCollectionPublic: async (
      params: Omit<
        TestContractParams<
          PoapSerieCollectionV2Types.Fields,
          never,
          PoapSerieCollectionV2Types.Maps
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<boolean, PoapSerieCollectionV2Types.Maps>
    > => {
      return testMethod(
        this,
        "isCollectionPublic",
        params,
        getContractByCodeHash
      );
    },
  };

  stateForTest(
    initFields: PoapSerieCollectionV2Types.Fields,
    asset?: Asset,
    address?: string,
    maps?: PoapSerieCollectionV2Types.Maps
  ) {
    return this.stateForTest_(initFields, asset, address, maps);
  }
}

// Use this object to test and deploy the contract
export const PoapSerieCollectionV2 = new Factory(
  Contract.fromJson(
    PoapSerieCollectionV2ContractJson,
    "=30-2+69=2-2+ee=2+3=1-1=2-1+7444=1+7=2-1+f=2+5=1-1=3-2+88=2+9=1-1=2-2+a=1-3=1458-2+41=202+7a7e0214696e73657274206174206d617020706174683a2000=1176",
    "07b512e4056c5fc28efa5c232cc13d594ab2c38021dcad3a86cf37d5e86e5139",
    AllStructs
  )
);
registerContract(PoapSerieCollectionV2);

// Use this class to interact with the blockchain
export class PoapSerieCollectionV2Instance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  maps = {
    nftMetadata: new RalphMap<bigint, HexString>(
      PoapSerieCollectionV2.contract,
      this.contractId,
      "nftMetadata"
    ),
  };

  async fetchState(): Promise<PoapSerieCollectionV2Types.State> {
    return fetchContractState(PoapSerieCollectionV2, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeSerieAddedEvent(
    options: EventSubscribeOptions<PoapSerieCollectionV2Types.SerieAddedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      PoapSerieCollectionV2.contract,
      this,
      options,
      "SerieAdded",
      fromCount
    );
  }

  subscribePoapMintedEvent(
    options: EventSubscribeOptions<PoapSerieCollectionV2Types.PoapMintedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      PoapSerieCollectionV2.contract,
      this,
      options,
      "PoapMinted",
      fromCount
    );
  }

  subscribePoapParticipatedEvent(
    options: EventSubscribeOptions<PoapSerieCollectionV2Types.PoapParticipatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      PoapSerieCollectionV2.contract,
      this,
      options,
      "PoapParticipated",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | PoapSerieCollectionV2Types.SerieAddedEvent
      | PoapSerieCollectionV2Types.PoapMintedEvent
      | PoapSerieCollectionV2Types.PoapParticipatedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      PoapSerieCollectionV2.contract,
      this,
      options,
      fromCount
    );
  }

  view = {
    getCollectionUri: async (
      params?: PoapSerieCollectionV2Types.CallMethodParams<"getCollectionUri">
    ): Promise<
      PoapSerieCollectionV2Types.CallMethodResult<"getCollectionUri">
    > => {
      return callMethod(
        PoapSerieCollectionV2,
        this,
        "getCollectionUri",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    totalSupply: async (
      params?: PoapSerieCollectionV2Types.CallMethodParams<"totalSupply">
    ): Promise<PoapSerieCollectionV2Types.CallMethodResult<"totalSupply">> => {
      return callMethod(
        PoapSerieCollectionV2,
        this,
        "totalSupply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    nftByIndex: async (
      params: PoapSerieCollectionV2Types.CallMethodParams<"nftByIndex">
    ): Promise<PoapSerieCollectionV2Types.CallMethodResult<"nftByIndex">> => {
      return callMethod(
        PoapSerieCollectionV2,
        this,
        "nftByIndex",
        params,
        getContractByCodeHash
      );
    },
    validateNFT: async (
      params: PoapSerieCollectionV2Types.CallMethodParams<"validateNFT">
    ): Promise<PoapSerieCollectionV2Types.CallMethodResult<"validateNFT">> => {
      return callMethod(
        PoapSerieCollectionV2,
        this,
        "validateNFT",
        params,
        getContractByCodeHash
      );
    },
    convert: async (
      params: PoapSerieCollectionV2Types.CallMethodParams<"convert">
    ): Promise<PoapSerieCollectionV2Types.CallMethodResult<"convert">> => {
      return callMethod(
        PoapSerieCollectionV2,
        this,
        "convert",
        params,
        getContractByCodeHash
      );
    },
    mint: async (
      params: PoapSerieCollectionV2Types.CallMethodParams<"mint">
    ): Promise<PoapSerieCollectionV2Types.CallMethodResult<"mint">> => {
      return callMethod(
        PoapSerieCollectionV2,
        this,
        "mint",
        params,
        getContractByCodeHash
      );
    },
    addNewEvent: async (
      params: PoapSerieCollectionV2Types.CallMethodParams<"addNewEvent">
    ): Promise<PoapSerieCollectionV2Types.CallMethodResult<"addNewEvent">> => {
      return callMethod(
        PoapSerieCollectionV2,
        this,
        "addNewEvent",
        params,
        getContractByCodeHash
      );
    },
    setParticipatedPresence: async (
      params: PoapSerieCollectionV2Types.CallMethodParams<"setParticipatedPresence">
    ): Promise<
      PoapSerieCollectionV2Types.CallMethodResult<"setParticipatedPresence">
    > => {
      return callMethod(
        PoapSerieCollectionV2,
        this,
        "setParticipatedPresence",
        params,
        getContractByCodeHash
      );
    },
    claimFunds: async (
      params: PoapSerieCollectionV2Types.CallMethodParams<"claimFunds">
    ): Promise<PoapSerieCollectionV2Types.CallMethodResult<"claimFunds">> => {
      return callMethod(
        PoapSerieCollectionV2,
        this,
        "claimFunds",
        params,
        getContractByCodeHash
      );
    },
    withdrawStorageFees: async (
      params: PoapSerieCollectionV2Types.CallMethodParams<"withdrawStorageFees">
    ): Promise<
      PoapSerieCollectionV2Types.CallMethodResult<"withdrawStorageFees">
    > => {
      return callMethod(
        PoapSerieCollectionV2,
        this,
        "withdrawStorageFees",
        params,
        getContractByCodeHash
      );
    },
    withdrawChainFees: async (
      params: PoapSerieCollectionV2Types.CallMethodParams<"withdrawChainFees">
    ): Promise<
      PoapSerieCollectionV2Types.CallMethodResult<"withdrawChainFees">
    > => {
      return callMethod(
        PoapSerieCollectionV2,
        this,
        "withdrawChainFees",
        params,
        getContractByCodeHash
      );
    },
    depositStorageFees: async (
      params: PoapSerieCollectionV2Types.CallMethodParams<"depositStorageFees">
    ): Promise<
      PoapSerieCollectionV2Types.CallMethodResult<"depositStorageFees">
    > => {
      return callMethod(
        PoapSerieCollectionV2,
        this,
        "depositStorageFees",
        params,
        getContractByCodeHash
      );
    },
    depositChainFees: async (
      params: PoapSerieCollectionV2Types.CallMethodParams<"depositChainFees">
    ): Promise<
      PoapSerieCollectionV2Types.CallMethodResult<"depositChainFees">
    > => {
      return callMethod(
        PoapSerieCollectionV2,
        this,
        "depositChainFees",
        params,
        getContractByCodeHash
      );
    },
    withdrawAirdrop: async (
      params: PoapSerieCollectionV2Types.CallMethodParams<"withdrawAirdrop">
    ): Promise<
      PoapSerieCollectionV2Types.CallMethodResult<"withdrawAirdrop">
    > => {
      return callMethod(
        PoapSerieCollectionV2,
        this,
        "withdrawAirdrop",
        params,
        getContractByCodeHash
      );
    },
    getOrganizer: async (
      params?: PoapSerieCollectionV2Types.CallMethodParams<"getOrganizer">
    ): Promise<PoapSerieCollectionV2Types.CallMethodResult<"getOrganizer">> => {
      return callMethod(
        PoapSerieCollectionV2,
        this,
        "getOrganizer",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    isCollectionPublic: async (
      params?: PoapSerieCollectionV2Types.CallMethodParams<"isCollectionPublic">
    ): Promise<
      PoapSerieCollectionV2Types.CallMethodResult<"isCollectionPublic">
    > => {
      return callMethod(
        PoapSerieCollectionV2,
        this,
        "isCollectionPublic",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    getCollectionUri: async (
      params: PoapSerieCollectionV2Types.SignExecuteMethodParams<"getCollectionUri">
    ): Promise<
      PoapSerieCollectionV2Types.SignExecuteMethodResult<"getCollectionUri">
    > => {
      return signExecuteMethod(
        PoapSerieCollectionV2,
        this,
        "getCollectionUri",
        params
      );
    },
    totalSupply: async (
      params: PoapSerieCollectionV2Types.SignExecuteMethodParams<"totalSupply">
    ): Promise<
      PoapSerieCollectionV2Types.SignExecuteMethodResult<"totalSupply">
    > => {
      return signExecuteMethod(
        PoapSerieCollectionV2,
        this,
        "totalSupply",
        params
      );
    },
    nftByIndex: async (
      params: PoapSerieCollectionV2Types.SignExecuteMethodParams<"nftByIndex">
    ): Promise<
      PoapSerieCollectionV2Types.SignExecuteMethodResult<"nftByIndex">
    > => {
      return signExecuteMethod(
        PoapSerieCollectionV2,
        this,
        "nftByIndex",
        params
      );
    },
    validateNFT: async (
      params: PoapSerieCollectionV2Types.SignExecuteMethodParams<"validateNFT">
    ): Promise<
      PoapSerieCollectionV2Types.SignExecuteMethodResult<"validateNFT">
    > => {
      return signExecuteMethod(
        PoapSerieCollectionV2,
        this,
        "validateNFT",
        params
      );
    },
    convert: async (
      params: PoapSerieCollectionV2Types.SignExecuteMethodParams<"convert">
    ): Promise<
      PoapSerieCollectionV2Types.SignExecuteMethodResult<"convert">
    > => {
      return signExecuteMethod(PoapSerieCollectionV2, this, "convert", params);
    },
    mint: async (
      params: PoapSerieCollectionV2Types.SignExecuteMethodParams<"mint">
    ): Promise<PoapSerieCollectionV2Types.SignExecuteMethodResult<"mint">> => {
      return signExecuteMethod(PoapSerieCollectionV2, this, "mint", params);
    },
    addNewEvent: async (
      params: PoapSerieCollectionV2Types.SignExecuteMethodParams<"addNewEvent">
    ): Promise<
      PoapSerieCollectionV2Types.SignExecuteMethodResult<"addNewEvent">
    > => {
      return signExecuteMethod(
        PoapSerieCollectionV2,
        this,
        "addNewEvent",
        params
      );
    },
    setParticipatedPresence: async (
      params: PoapSerieCollectionV2Types.SignExecuteMethodParams<"setParticipatedPresence">
    ): Promise<
      PoapSerieCollectionV2Types.SignExecuteMethodResult<"setParticipatedPresence">
    > => {
      return signExecuteMethod(
        PoapSerieCollectionV2,
        this,
        "setParticipatedPresence",
        params
      );
    },
    claimFunds: async (
      params: PoapSerieCollectionV2Types.SignExecuteMethodParams<"claimFunds">
    ): Promise<
      PoapSerieCollectionV2Types.SignExecuteMethodResult<"claimFunds">
    > => {
      return signExecuteMethod(
        PoapSerieCollectionV2,
        this,
        "claimFunds",
        params
      );
    },
    withdrawStorageFees: async (
      params: PoapSerieCollectionV2Types.SignExecuteMethodParams<"withdrawStorageFees">
    ): Promise<
      PoapSerieCollectionV2Types.SignExecuteMethodResult<"withdrawStorageFees">
    > => {
      return signExecuteMethod(
        PoapSerieCollectionV2,
        this,
        "withdrawStorageFees",
        params
      );
    },
    withdrawChainFees: async (
      params: PoapSerieCollectionV2Types.SignExecuteMethodParams<"withdrawChainFees">
    ): Promise<
      PoapSerieCollectionV2Types.SignExecuteMethodResult<"withdrawChainFees">
    > => {
      return signExecuteMethod(
        PoapSerieCollectionV2,
        this,
        "withdrawChainFees",
        params
      );
    },
    depositStorageFees: async (
      params: PoapSerieCollectionV2Types.SignExecuteMethodParams<"depositStorageFees">
    ): Promise<
      PoapSerieCollectionV2Types.SignExecuteMethodResult<"depositStorageFees">
    > => {
      return signExecuteMethod(
        PoapSerieCollectionV2,
        this,
        "depositStorageFees",
        params
      );
    },
    depositChainFees: async (
      params: PoapSerieCollectionV2Types.SignExecuteMethodParams<"depositChainFees">
    ): Promise<
      PoapSerieCollectionV2Types.SignExecuteMethodResult<"depositChainFees">
    > => {
      return signExecuteMethod(
        PoapSerieCollectionV2,
        this,
        "depositChainFees",
        params
      );
    },
    withdrawAirdrop: async (
      params: PoapSerieCollectionV2Types.SignExecuteMethodParams<"withdrawAirdrop">
    ): Promise<
      PoapSerieCollectionV2Types.SignExecuteMethodResult<"withdrawAirdrop">
    > => {
      return signExecuteMethod(
        PoapSerieCollectionV2,
        this,
        "withdrawAirdrop",
        params
      );
    },
    getOrganizer: async (
      params: PoapSerieCollectionV2Types.SignExecuteMethodParams<"getOrganizer">
    ): Promise<
      PoapSerieCollectionV2Types.SignExecuteMethodResult<"getOrganizer">
    > => {
      return signExecuteMethod(
        PoapSerieCollectionV2,
        this,
        "getOrganizer",
        params
      );
    },
    isCollectionPublic: async (
      params: PoapSerieCollectionV2Types.SignExecuteMethodParams<"isCollectionPublic">
    ): Promise<
      PoapSerieCollectionV2Types.SignExecuteMethodResult<"isCollectionPublic">
    > => {
      return signExecuteMethod(
        PoapSerieCollectionV2,
        this,
        "isCollectionPublic",
        params
      );
    },
  };

  async multicall<Calls extends PoapSerieCollectionV2Types.MultiCallParams>(
    calls: Calls
  ): Promise<PoapSerieCollectionV2Types.MultiCallResults<Calls>>;
  async multicall<Callss extends PoapSerieCollectionV2Types.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<PoapSerieCollectionV2Types.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | PoapSerieCollectionV2Types.MultiCallParams
      | PoapSerieCollectionV2Types.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      PoapSerieCollectionV2,
      this,
      callss,
      getContractByCodeHash
    );
  }
}
