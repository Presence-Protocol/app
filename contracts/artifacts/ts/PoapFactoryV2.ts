/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as PoapFactoryV2ContractJson } from "../V2/PoapFactoryV2.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";
import { Trait, AllStructs } from "./types";

// Custom types for the contract
export namespace PoapFactoryV2Types {
  export type Fields = {
    collectionTemplateId: HexString;
    collectionTemplateSeriesId: HexString;
    poapTemplateId: HexString;
    poapTemplateSeriesId: HexString;
    poapTemplateDataId: HexString;
    numMintedCollection: bigint;
  };

  export type State = ContractState<Fields>;

  export type EventCreatedEvent = ContractEvent<{
    contractId: HexString;
    eventName: HexString;
    organizer: Address;
    isPublic: boolean;
    timestamp: bigint;
    isSeries: boolean;
  }>;
  export type PoapMintedEvent = ContractEvent<{
    contractId: HexString;
    collectionId: HexString;
    nftIndex: bigint;
    caller: Address;
    isPublic: boolean;
    timestamp: bigint;
  }>;
  export type PoapSerieMintedEvent = ContractEvent<{
    contractId: HexString;
    collectionId: HexString;
    eventId: bigint;
    nftIndex: bigint;
    caller: Address;
    isPublic: boolean;
    timestamp: bigint;
  }>;
  export type PoapParticipatedInEvent = ContractEvent<{
    organizerAddress: Address;
    collectionId: HexString;
    nftIndex: bigint;
    presenceAddressValidate: Address;
  }>;
  export type SerieAddedEvent = ContractEvent<{
    collectionId: HexString;
    eventContractId: HexString;
    eventName: HexString;
    organizer: Address;
    isPublic: boolean;
    timestamp: bigint;
  }>;

  export interface CallMethodTable {
    mintNewCollection: {
      params: CallContractParams<{
        maxSupply: bigint;
        mintStartAt: bigint;
        mintEndAt: bigint;
        oneMintPerAddress: boolean;
        poapPrice: bigint;
        tokenIdPoap: HexString;
        isOpenPrice: boolean;
        tokenIdAirdrop: HexString;
        amountAirdropPerUser: bigint;
        airdropWhenHasParticipated: boolean;
        hashedPassword: HexString;
        lockPresenceUntil: bigint;
        eventImage: HexString;
        eventName: HexString;
        description: HexString;
        location: HexString;
        eventStartAt: bigint;
        eventEndAt: bigint;
        isPublic: boolean;
        isBurnable: boolean;
        amountForStorageFees: bigint;
        amountForChainFees: bigint;
        amountPoapFees: bigint;
        totalSupply: bigint;
        amountAirdrop: bigint;
      }>;
      result: CallContractResult<HexString>;
    };
    mintNewCollectionWithSerie: {
      params: CallContractParams<{
        eventImage: HexString;
        eventName: HexString;
        description: HexString;
        isPublic: boolean;
      }>;
      result: CallContractResult<HexString>;
    };
    createNewEvent: {
      params: CallContractParams<{
        collection: HexString;
        maxSupply: bigint;
        mintStartAt: bigint;
        mintEndAt: bigint;
        poapPrice: bigint;
        tokenIdPoap: HexString;
        isOpenPrice: boolean;
        tokenIdAirdrop: HexString;
        amountAirdropPerUser: bigint;
        airdropWhenHasParticipated: boolean;
        eventImage: HexString;
        eventName: HexString;
        description: HexString;
        location: HexString;
        eventStartAt: bigint;
        eventEndAt: bigint;
        isPublic: boolean;
        isBurnable: boolean;
        lockedUntil: bigint;
        hashedPassword: HexString;
        amountAirdrop: bigint;
      }>;
      result: CallContractResult<null>;
    };
    mintPoapSerie: {
      params: CallContractParams<{
        collection: HexString;
        eventId: bigint;
        amount: bigint;
        password: HexString;
      }>;
      result: CallContractResult<null>;
    };
    mintPoap: {
      params: CallContractParams<{
        collection: HexString;
        amount: bigint;
        password: HexString;
      }>;
      result: CallContractResult<null>;
    };
    setParticipatedPresence: {
      params: CallContractParams<{
        collection: HexString;
        nftIndex: bigint;
        presenceAddressValidate: Address;
      }>;
      result: CallContractResult<null>;
    };
    getNumEventsCreated: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    mintNewCollection: {
      params: SignExecuteContractMethodParams<{
        maxSupply: bigint;
        mintStartAt: bigint;
        mintEndAt: bigint;
        oneMintPerAddress: boolean;
        poapPrice: bigint;
        tokenIdPoap: HexString;
        isOpenPrice: boolean;
        tokenIdAirdrop: HexString;
        amountAirdropPerUser: bigint;
        airdropWhenHasParticipated: boolean;
        hashedPassword: HexString;
        lockPresenceUntil: bigint;
        eventImage: HexString;
        eventName: HexString;
        description: HexString;
        location: HexString;
        eventStartAt: bigint;
        eventEndAt: bigint;
        isPublic: boolean;
        isBurnable: boolean;
        amountForStorageFees: bigint;
        amountForChainFees: bigint;
        amountPoapFees: bigint;
        totalSupply: bigint;
        amountAirdrop: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    mintNewCollectionWithSerie: {
      params: SignExecuteContractMethodParams<{
        eventImage: HexString;
        eventName: HexString;
        description: HexString;
        isPublic: boolean;
      }>;
      result: SignExecuteScriptTxResult;
    };
    createNewEvent: {
      params: SignExecuteContractMethodParams<{
        collection: HexString;
        maxSupply: bigint;
        mintStartAt: bigint;
        mintEndAt: bigint;
        poapPrice: bigint;
        tokenIdPoap: HexString;
        isOpenPrice: boolean;
        tokenIdAirdrop: HexString;
        amountAirdropPerUser: bigint;
        airdropWhenHasParticipated: boolean;
        eventImage: HexString;
        eventName: HexString;
        description: HexString;
        location: HexString;
        eventStartAt: bigint;
        eventEndAt: bigint;
        isPublic: boolean;
        isBurnable: boolean;
        lockedUntil: bigint;
        hashedPassword: HexString;
        amountAirdrop: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    mintPoapSerie: {
      params: SignExecuteContractMethodParams<{
        collection: HexString;
        eventId: bigint;
        amount: bigint;
        password: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    mintPoap: {
      params: SignExecuteContractMethodParams<{
        collection: HexString;
        amount: bigint;
        password: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    setParticipatedPresence: {
      params: SignExecuteContractMethodParams<{
        collection: HexString;
        nftIndex: bigint;
        presenceAddressValidate: Address;
      }>;
      result: SignExecuteScriptTxResult;
    };
    getNumEventsCreated: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  PoapFactoryV2Instance,
  PoapFactoryV2Types.Fields
> {
  encodeFields(fields: PoapFactoryV2Types.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  eventIndex = {
    EventCreated: 0,
    PoapMinted: 1,
    PoapSerieMinted: 2,
    PoapParticipatedIn: 3,
    SerieAdded: 4,
  };

  at(address: string): PoapFactoryV2Instance {
    return new PoapFactoryV2Instance(address);
  }

  tests = {
    mintNewCollection: async (
      params: TestContractParamsWithoutMaps<
        PoapFactoryV2Types.Fields,
        {
          maxSupply: bigint;
          mintStartAt: bigint;
          mintEndAt: bigint;
          oneMintPerAddress: boolean;
          poapPrice: bigint;
          tokenIdPoap: HexString;
          isOpenPrice: boolean;
          tokenIdAirdrop: HexString;
          amountAirdropPerUser: bigint;
          airdropWhenHasParticipated: boolean;
          hashedPassword: HexString;
          lockPresenceUntil: bigint;
          eventImage: HexString;
          eventName: HexString;
          description: HexString;
          location: HexString;
          eventStartAt: bigint;
          eventEndAt: bigint;
          isPublic: boolean;
          isBurnable: boolean;
          amountForStorageFees: bigint;
          amountForChainFees: bigint;
          amountPoapFees: bigint;
          totalSupply: bigint;
          amountAirdrop: bigint;
        }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(
        this,
        "mintNewCollection",
        params,
        getContractByCodeHash
      );
    },
    mintNewCollectionWithSerie: async (
      params: TestContractParamsWithoutMaps<
        PoapFactoryV2Types.Fields,
        {
          eventImage: HexString;
          eventName: HexString;
          description: HexString;
          isPublic: boolean;
        }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(
        this,
        "mintNewCollectionWithSerie",
        params,
        getContractByCodeHash
      );
    },
    createNewEvent: async (
      params: TestContractParamsWithoutMaps<
        PoapFactoryV2Types.Fields,
        {
          collection: HexString;
          maxSupply: bigint;
          mintStartAt: bigint;
          mintEndAt: bigint;
          poapPrice: bigint;
          tokenIdPoap: HexString;
          isOpenPrice: boolean;
          tokenIdAirdrop: HexString;
          amountAirdropPerUser: bigint;
          airdropWhenHasParticipated: boolean;
          eventImage: HexString;
          eventName: HexString;
          description: HexString;
          location: HexString;
          eventStartAt: bigint;
          eventEndAt: bigint;
          isPublic: boolean;
          isBurnable: boolean;
          lockedUntil: bigint;
          hashedPassword: HexString;
          amountAirdrop: bigint;
        }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "createNewEvent", params, getContractByCodeHash);
    },
    mintPoapSerie: async (
      params: TestContractParamsWithoutMaps<
        PoapFactoryV2Types.Fields,
        {
          collection: HexString;
          eventId: bigint;
          amount: bigint;
          password: HexString;
        }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "mintPoapSerie", params, getContractByCodeHash);
    },
    mintPoap: async (
      params: TestContractParamsWithoutMaps<
        PoapFactoryV2Types.Fields,
        { collection: HexString; amount: bigint; password: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "mintPoap", params, getContractByCodeHash);
    },
    setParticipatedPresence: async (
      params: TestContractParamsWithoutMaps<
        PoapFactoryV2Types.Fields,
        {
          collection: HexString;
          nftIndex: bigint;
          presenceAddressValidate: Address;
        }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "setParticipatedPresence",
        params,
        getContractByCodeHash
      );
    },
    getNumEventsCreated: async (
      params: Omit<
        TestContractParamsWithoutMaps<PoapFactoryV2Types.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "getNumEventsCreated",
        params,
        getContractByCodeHash
      );
    },
  };

  stateForTest(
    initFields: PoapFactoryV2Types.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const PoapFactoryV2 = new Factory(
  Contract.fromJson(
    PoapFactoryV2ContractJson,
    "",
    "c6a65eb120819d04d390c954b5b3a5271e94f7ab8c29a65966c47a5e8ecca7f0",
    AllStructs
  )
);
registerContract(PoapFactoryV2);

// Use this class to interact with the blockchain
export class PoapFactoryV2Instance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<PoapFactoryV2Types.State> {
    return fetchContractState(PoapFactoryV2, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeEventCreatedEvent(
    options: EventSubscribeOptions<PoapFactoryV2Types.EventCreatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      PoapFactoryV2.contract,
      this,
      options,
      "EventCreated",
      fromCount
    );
  }

  subscribePoapMintedEvent(
    options: EventSubscribeOptions<PoapFactoryV2Types.PoapMintedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      PoapFactoryV2.contract,
      this,
      options,
      "PoapMinted",
      fromCount
    );
  }

  subscribePoapSerieMintedEvent(
    options: EventSubscribeOptions<PoapFactoryV2Types.PoapSerieMintedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      PoapFactoryV2.contract,
      this,
      options,
      "PoapSerieMinted",
      fromCount
    );
  }

  subscribePoapParticipatedInEvent(
    options: EventSubscribeOptions<PoapFactoryV2Types.PoapParticipatedInEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      PoapFactoryV2.contract,
      this,
      options,
      "PoapParticipatedIn",
      fromCount
    );
  }

  subscribeSerieAddedEvent(
    options: EventSubscribeOptions<PoapFactoryV2Types.SerieAddedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      PoapFactoryV2.contract,
      this,
      options,
      "SerieAdded",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | PoapFactoryV2Types.EventCreatedEvent
      | PoapFactoryV2Types.PoapMintedEvent
      | PoapFactoryV2Types.PoapSerieMintedEvent
      | PoapFactoryV2Types.PoapParticipatedInEvent
      | PoapFactoryV2Types.SerieAddedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      PoapFactoryV2.contract,
      this,
      options,
      fromCount
    );
  }

  view = {
    mintNewCollection: async (
      params: PoapFactoryV2Types.CallMethodParams<"mintNewCollection">
    ): Promise<PoapFactoryV2Types.CallMethodResult<"mintNewCollection">> => {
      return callMethod(
        PoapFactoryV2,
        this,
        "mintNewCollection",
        params,
        getContractByCodeHash
      );
    },
    mintNewCollectionWithSerie: async (
      params: PoapFactoryV2Types.CallMethodParams<"mintNewCollectionWithSerie">
    ): Promise<
      PoapFactoryV2Types.CallMethodResult<"mintNewCollectionWithSerie">
    > => {
      return callMethod(
        PoapFactoryV2,
        this,
        "mintNewCollectionWithSerie",
        params,
        getContractByCodeHash
      );
    },
    createNewEvent: async (
      params: PoapFactoryV2Types.CallMethodParams<"createNewEvent">
    ): Promise<PoapFactoryV2Types.CallMethodResult<"createNewEvent">> => {
      return callMethod(
        PoapFactoryV2,
        this,
        "createNewEvent",
        params,
        getContractByCodeHash
      );
    },
    mintPoapSerie: async (
      params: PoapFactoryV2Types.CallMethodParams<"mintPoapSerie">
    ): Promise<PoapFactoryV2Types.CallMethodResult<"mintPoapSerie">> => {
      return callMethod(
        PoapFactoryV2,
        this,
        "mintPoapSerie",
        params,
        getContractByCodeHash
      );
    },
    mintPoap: async (
      params: PoapFactoryV2Types.CallMethodParams<"mintPoap">
    ): Promise<PoapFactoryV2Types.CallMethodResult<"mintPoap">> => {
      return callMethod(
        PoapFactoryV2,
        this,
        "mintPoap",
        params,
        getContractByCodeHash
      );
    },
    setParticipatedPresence: async (
      params: PoapFactoryV2Types.CallMethodParams<"setParticipatedPresence">
    ): Promise<
      PoapFactoryV2Types.CallMethodResult<"setParticipatedPresence">
    > => {
      return callMethod(
        PoapFactoryV2,
        this,
        "setParticipatedPresence",
        params,
        getContractByCodeHash
      );
    },
    getNumEventsCreated: async (
      params?: PoapFactoryV2Types.CallMethodParams<"getNumEventsCreated">
    ): Promise<PoapFactoryV2Types.CallMethodResult<"getNumEventsCreated">> => {
      return callMethod(
        PoapFactoryV2,
        this,
        "getNumEventsCreated",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    mintNewCollection: async (
      params: PoapFactoryV2Types.SignExecuteMethodParams<"mintNewCollection">
    ): Promise<
      PoapFactoryV2Types.SignExecuteMethodResult<"mintNewCollection">
    > => {
      return signExecuteMethod(
        PoapFactoryV2,
        this,
        "mintNewCollection",
        params
      );
    },
    mintNewCollectionWithSerie: async (
      params: PoapFactoryV2Types.SignExecuteMethodParams<"mintNewCollectionWithSerie">
    ): Promise<
      PoapFactoryV2Types.SignExecuteMethodResult<"mintNewCollectionWithSerie">
    > => {
      return signExecuteMethod(
        PoapFactoryV2,
        this,
        "mintNewCollectionWithSerie",
        params
      );
    },
    createNewEvent: async (
      params: PoapFactoryV2Types.SignExecuteMethodParams<"createNewEvent">
    ): Promise<
      PoapFactoryV2Types.SignExecuteMethodResult<"createNewEvent">
    > => {
      return signExecuteMethod(PoapFactoryV2, this, "createNewEvent", params);
    },
    mintPoapSerie: async (
      params: PoapFactoryV2Types.SignExecuteMethodParams<"mintPoapSerie">
    ): Promise<PoapFactoryV2Types.SignExecuteMethodResult<"mintPoapSerie">> => {
      return signExecuteMethod(PoapFactoryV2, this, "mintPoapSerie", params);
    },
    mintPoap: async (
      params: PoapFactoryV2Types.SignExecuteMethodParams<"mintPoap">
    ): Promise<PoapFactoryV2Types.SignExecuteMethodResult<"mintPoap">> => {
      return signExecuteMethod(PoapFactoryV2, this, "mintPoap", params);
    },
    setParticipatedPresence: async (
      params: PoapFactoryV2Types.SignExecuteMethodParams<"setParticipatedPresence">
    ): Promise<
      PoapFactoryV2Types.SignExecuteMethodResult<"setParticipatedPresence">
    > => {
      return signExecuteMethod(
        PoapFactoryV2,
        this,
        "setParticipatedPresence",
        params
      );
    },
    getNumEventsCreated: async (
      params: PoapFactoryV2Types.SignExecuteMethodParams<"getNumEventsCreated">
    ): Promise<
      PoapFactoryV2Types.SignExecuteMethodResult<"getNumEventsCreated">
    > => {
      return signExecuteMethod(
        PoapFactoryV2,
        this,
        "getNumEventsCreated",
        params
      );
    },
  };

  async multicall<Calls extends PoapFactoryV2Types.MultiCallParams>(
    calls: Calls
  ): Promise<PoapFactoryV2Types.MultiCallResults<Calls>>;
  async multicall<Callss extends PoapFactoryV2Types.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<PoapFactoryV2Types.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | PoapFactoryV2Types.MultiCallParams
      | PoapFactoryV2Types.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      PoapFactoryV2,
      this,
      callss,
      getContractByCodeHash
    );
  }
}
