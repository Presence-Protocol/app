/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as PoapDataContractJson } from "../V2/series/PoapData.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";
import { Trait, AllStructs } from "./types";

// Custom types for the contract
export namespace PoapDataTypes {
  export type Fields = {
    collectionId: HexString;
    maxSupply: bigint;
    mintStartAt: bigint;
    mintEndAt: bigint;
    poapPrice: bigint;
    tokenIdPoap: HexString;
    isOpenPrice: boolean;
    tokenIdAirdrop: HexString;
    amountAirdropPerUser: bigint;
    airdropWhenHasParticipated: boolean;
    eventImage: HexString;
    eventName: HexString;
    description: HexString;
    organizer: Address;
    location: HexString;
    eventStartAt: bigint;
    eventEndAt: bigint;
    isPublic: boolean;
    isBurnable: boolean;
    lockedUntil: bigint;
    hashedPassword: HexString;
    totalSupply: bigint;
    amountForStorageFees: bigint;
    amountForChainFees: bigint;
    amountPoapFees: bigint;
    amountAirdrop: bigint;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    incrementTotalSupply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    sendAirdrop: {
      params: CallContractParams<{ addressToAirdrop: Address }>;
      result: CallContractResult<null>;
    };
    depositPaidPoap: {
      params: CallContractParams<{ amount: bigint }>;
      result: CallContractResult<null>;
    };
    claimFunds: {
      params: CallContractParams<{ amountToClaim: bigint }>;
      result: CallContractResult<null>;
    };
    withdrawStorageFees: {
      params: CallContractParams<{ amount: bigint }>;
      result: CallContractResult<null>;
    };
    addStorageFees: {
      params: CallContractParams<{ amount: bigint }>;
      result: CallContractResult<null>;
    };
    useStorageFees: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    withdrawChainFees: {
      params: CallContractParams<{ amount: bigint }>;
      result: CallContractResult<null>;
    };
    addChainFees: {
      params: CallContractParams<{ amount: bigint }>;
      result: CallContractResult<null>;
    };
    useChainFees: {
      params: CallContractParams<{ amount: bigint }>;
      result: CallContractResult<null>;
    };
    withdrawAirdrop: {
      params: CallContractParams<{ amount: bigint }>;
      result: CallContractResult<null>;
    };
    getAmountForStorageFees: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getAmountForChainFees: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getAmountPoapFees: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getAmountAirdrop: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getName: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getDescription: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getImage: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getCurrentSupply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getMaxSupply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getMintStartAt: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getMintEndAt: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getOrganizer: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getLocation: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getEventStartAt: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getEventEndAt: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getIsPublic: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<boolean>;
    };
    getIsBurnable: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<boolean>;
    };
    getLockedUntil: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getIsOpenPrice: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<boolean>;
    };
    getPoapPrice: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<[bigint, HexString, boolean]>;
    };
    getTokenIdPoap: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getTokenIdAirdrop: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getAmountAirdropPerUser: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getAirdropWhenHasParticipated: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<boolean>;
    };
    getHashedPassword: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getPrepaidFeesAmount: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<[bigint, bigint]>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    incrementTotalSupply: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    sendAirdrop: {
      params: SignExecuteContractMethodParams<{ addressToAirdrop: Address }>;
      result: SignExecuteScriptTxResult;
    };
    depositPaidPoap: {
      params: SignExecuteContractMethodParams<{ amount: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    claimFunds: {
      params: SignExecuteContractMethodParams<{ amountToClaim: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    withdrawStorageFees: {
      params: SignExecuteContractMethodParams<{ amount: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    addStorageFees: {
      params: SignExecuteContractMethodParams<{ amount: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    useStorageFees: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    withdrawChainFees: {
      params: SignExecuteContractMethodParams<{ amount: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    addChainFees: {
      params: SignExecuteContractMethodParams<{ amount: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    useChainFees: {
      params: SignExecuteContractMethodParams<{ amount: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    withdrawAirdrop: {
      params: SignExecuteContractMethodParams<{ amount: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    getAmountForStorageFees: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getAmountForChainFees: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getAmountPoapFees: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getAmountAirdrop: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getName: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getDescription: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getImage: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getCurrentSupply: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getMaxSupply: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getMintStartAt: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getMintEndAt: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getOrganizer: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getLocation: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getEventStartAt: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getEventEndAt: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getIsPublic: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getIsBurnable: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getLockedUntil: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getIsOpenPrice: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getPoapPrice: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getTokenIdPoap: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getTokenIdAirdrop: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getAmountAirdropPerUser: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getAirdropWhenHasParticipated: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getHashedPassword: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getPrepaidFeesAmount: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<PoapDataInstance, PoapDataTypes.Fields> {
  encodeFields(fields: PoapDataTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  at(address: string): PoapDataInstance {
    return new PoapDataInstance(address);
  }

  tests = {
    incrementTotalSupply: async (
      params: Omit<
        TestContractParamsWithoutMaps<PoapDataTypes.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "incrementTotalSupply",
        params,
        getContractByCodeHash
      );
    },
    sendAirdrop: async (
      params: TestContractParamsWithoutMaps<
        PoapDataTypes.Fields,
        { addressToAirdrop: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "sendAirdrop", params, getContractByCodeHash);
    },
    depositPaidPoap: async (
      params: TestContractParamsWithoutMaps<
        PoapDataTypes.Fields,
        { amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "depositPaidPoap", params, getContractByCodeHash);
    },
    claimFunds: async (
      params: TestContractParamsWithoutMaps<
        PoapDataTypes.Fields,
        { amountToClaim: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "claimFunds", params, getContractByCodeHash);
    },
    withdrawStorageFees: async (
      params: TestContractParamsWithoutMaps<
        PoapDataTypes.Fields,
        { amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "withdrawStorageFees",
        params,
        getContractByCodeHash
      );
    },
    addStorageFees: async (
      params: TestContractParamsWithoutMaps<
        PoapDataTypes.Fields,
        { amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "addStorageFees", params, getContractByCodeHash);
    },
    useStorageFees: async (
      params: Omit<
        TestContractParamsWithoutMaps<PoapDataTypes.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "useStorageFees", params, getContractByCodeHash);
    },
    withdrawChainFees: async (
      params: TestContractParamsWithoutMaps<
        PoapDataTypes.Fields,
        { amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "withdrawChainFees",
        params,
        getContractByCodeHash
      );
    },
    addChainFees: async (
      params: TestContractParamsWithoutMaps<
        PoapDataTypes.Fields,
        { amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "addChainFees", params, getContractByCodeHash);
    },
    useChainFees: async (
      params: TestContractParamsWithoutMaps<
        PoapDataTypes.Fields,
        { amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "useChainFees", params, getContractByCodeHash);
    },
    withdrawAirdrop: async (
      params: TestContractParamsWithoutMaps<
        PoapDataTypes.Fields,
        { amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "withdrawAirdrop", params, getContractByCodeHash);
    },
    getAmountForStorageFees: async (
      params: Omit<
        TestContractParamsWithoutMaps<PoapDataTypes.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "getAmountForStorageFees",
        params,
        getContractByCodeHash
      );
    },
    getAmountForChainFees: async (
      params: Omit<
        TestContractParamsWithoutMaps<PoapDataTypes.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "getAmountForChainFees",
        params,
        getContractByCodeHash
      );
    },
    getAmountPoapFees: async (
      params: Omit<
        TestContractParamsWithoutMaps<PoapDataTypes.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "getAmountPoapFees",
        params,
        getContractByCodeHash
      );
    },
    getAmountAirdrop: async (
      params: Omit<
        TestContractParamsWithoutMaps<PoapDataTypes.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "getAmountAirdrop",
        params,
        getContractByCodeHash
      );
    },
    getName: async (
      params: Omit<
        TestContractParamsWithoutMaps<PoapDataTypes.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getName", params, getContractByCodeHash);
    },
    getDescription: async (
      params: Omit<
        TestContractParamsWithoutMaps<PoapDataTypes.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getDescription", params, getContractByCodeHash);
    },
    getImage: async (
      params: Omit<
        TestContractParamsWithoutMaps<PoapDataTypes.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getImage", params, getContractByCodeHash);
    },
    getCurrentSupply: async (
      params: Omit<
        TestContractParamsWithoutMaps<PoapDataTypes.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "getCurrentSupply",
        params,
        getContractByCodeHash
      );
    },
    getMaxSupply: async (
      params: Omit<
        TestContractParamsWithoutMaps<PoapDataTypes.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getMaxSupply", params, getContractByCodeHash);
    },
    getMintStartAt: async (
      params: Omit<
        TestContractParamsWithoutMaps<PoapDataTypes.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getMintStartAt", params, getContractByCodeHash);
    },
    getMintEndAt: async (
      params: Omit<
        TestContractParamsWithoutMaps<PoapDataTypes.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getMintEndAt", params, getContractByCodeHash);
    },
    getOrganizer: async (
      params: Omit<
        TestContractParamsWithoutMaps<PoapDataTypes.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<Address>> => {
      return testMethod(this, "getOrganizer", params, getContractByCodeHash);
    },
    getLocation: async (
      params: Omit<
        TestContractParamsWithoutMaps<PoapDataTypes.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getLocation", params, getContractByCodeHash);
    },
    getEventStartAt: async (
      params: Omit<
        TestContractParamsWithoutMaps<PoapDataTypes.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getEventStartAt", params, getContractByCodeHash);
    },
    getEventEndAt: async (
      params: Omit<
        TestContractParamsWithoutMaps<PoapDataTypes.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getEventEndAt", params, getContractByCodeHash);
    },
    getIsPublic: async (
      params: Omit<
        TestContractParamsWithoutMaps<PoapDataTypes.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<boolean>> => {
      return testMethod(this, "getIsPublic", params, getContractByCodeHash);
    },
    getIsBurnable: async (
      params: Omit<
        TestContractParamsWithoutMaps<PoapDataTypes.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<boolean>> => {
      return testMethod(this, "getIsBurnable", params, getContractByCodeHash);
    },
    getLockedUntil: async (
      params: Omit<
        TestContractParamsWithoutMaps<PoapDataTypes.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getLockedUntil", params, getContractByCodeHash);
    },
    getIsOpenPrice: async (
      params: Omit<
        TestContractParamsWithoutMaps<PoapDataTypes.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<boolean>> => {
      return testMethod(this, "getIsOpenPrice", params, getContractByCodeHash);
    },
    getPoapPrice: async (
      params: Omit<
        TestContractParamsWithoutMaps<PoapDataTypes.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<[bigint, HexString, boolean]>> => {
      return testMethod(this, "getPoapPrice", params, getContractByCodeHash);
    },
    getTokenIdPoap: async (
      params: Omit<
        TestContractParamsWithoutMaps<PoapDataTypes.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getTokenIdPoap", params, getContractByCodeHash);
    },
    getTokenIdAirdrop: async (
      params: Omit<
        TestContractParamsWithoutMaps<PoapDataTypes.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(
        this,
        "getTokenIdAirdrop",
        params,
        getContractByCodeHash
      );
    },
    getAmountAirdropPerUser: async (
      params: Omit<
        TestContractParamsWithoutMaps<PoapDataTypes.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "getAmountAirdropPerUser",
        params,
        getContractByCodeHash
      );
    },
    getAirdropWhenHasParticipated: async (
      params: Omit<
        TestContractParamsWithoutMaps<PoapDataTypes.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<boolean>> => {
      return testMethod(
        this,
        "getAirdropWhenHasParticipated",
        params,
        getContractByCodeHash
      );
    },
    getHashedPassword: async (
      params: Omit<
        TestContractParamsWithoutMaps<PoapDataTypes.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(
        this,
        "getHashedPassword",
        params,
        getContractByCodeHash
      );
    },
    getPrepaidFeesAmount: async (
      params: Omit<
        TestContractParamsWithoutMaps<PoapDataTypes.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<[bigint, bigint]>> => {
      return testMethod(
        this,
        "getPrepaidFeesAmount",
        params,
        getContractByCodeHash
      );
    },
  };

  stateForTest(
    initFields: PoapDataTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const PoapData = new Factory(
  Contract.fromJson(
    PoapDataContractJson,
    "=25-4=2-1+8=3-1+7=2-2+58=2-2+71=3-2=1-2=3-1+9=2-5=1+7=3-1+5=3-1+341f1=3-1+f=3-1+d=3-1+b=3-5+9=3-1+7=3-1+5=3-1+3=3+142=1+f=3-1+d=3-1+b=3-3=1-1=2-2+a7=3-1+5=3-1+3=3-1+5=3-1+3=3-1+142ff=3-1+d431b432b=432-2+12=52+1600a0017e031a6465706f73697453746f726167654665657320616d6f756e7420022c2000=1062",
    "f5880f984cf664a8574a9436809d94405938dc2cad70352efe950e3a7f10c069",
    AllStructs
  )
);
registerContract(PoapData);

// Use this class to interact with the blockchain
export class PoapDataInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<PoapDataTypes.State> {
    return fetchContractState(PoapData, this);
  }

  view = {
    incrementTotalSupply: async (
      params?: PoapDataTypes.CallMethodParams<"incrementTotalSupply">
    ): Promise<PoapDataTypes.CallMethodResult<"incrementTotalSupply">> => {
      return callMethod(
        PoapData,
        this,
        "incrementTotalSupply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    sendAirdrop: async (
      params: PoapDataTypes.CallMethodParams<"sendAirdrop">
    ): Promise<PoapDataTypes.CallMethodResult<"sendAirdrop">> => {
      return callMethod(
        PoapData,
        this,
        "sendAirdrop",
        params,
        getContractByCodeHash
      );
    },
    depositPaidPoap: async (
      params: PoapDataTypes.CallMethodParams<"depositPaidPoap">
    ): Promise<PoapDataTypes.CallMethodResult<"depositPaidPoap">> => {
      return callMethod(
        PoapData,
        this,
        "depositPaidPoap",
        params,
        getContractByCodeHash
      );
    },
    claimFunds: async (
      params: PoapDataTypes.CallMethodParams<"claimFunds">
    ): Promise<PoapDataTypes.CallMethodResult<"claimFunds">> => {
      return callMethod(
        PoapData,
        this,
        "claimFunds",
        params,
        getContractByCodeHash
      );
    },
    withdrawStorageFees: async (
      params: PoapDataTypes.CallMethodParams<"withdrawStorageFees">
    ): Promise<PoapDataTypes.CallMethodResult<"withdrawStorageFees">> => {
      return callMethod(
        PoapData,
        this,
        "withdrawStorageFees",
        params,
        getContractByCodeHash
      );
    },
    addStorageFees: async (
      params: PoapDataTypes.CallMethodParams<"addStorageFees">
    ): Promise<PoapDataTypes.CallMethodResult<"addStorageFees">> => {
      return callMethod(
        PoapData,
        this,
        "addStorageFees",
        params,
        getContractByCodeHash
      );
    },
    useStorageFees: async (
      params?: PoapDataTypes.CallMethodParams<"useStorageFees">
    ): Promise<PoapDataTypes.CallMethodResult<"useStorageFees">> => {
      return callMethod(
        PoapData,
        this,
        "useStorageFees",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    withdrawChainFees: async (
      params: PoapDataTypes.CallMethodParams<"withdrawChainFees">
    ): Promise<PoapDataTypes.CallMethodResult<"withdrawChainFees">> => {
      return callMethod(
        PoapData,
        this,
        "withdrawChainFees",
        params,
        getContractByCodeHash
      );
    },
    addChainFees: async (
      params: PoapDataTypes.CallMethodParams<"addChainFees">
    ): Promise<PoapDataTypes.CallMethodResult<"addChainFees">> => {
      return callMethod(
        PoapData,
        this,
        "addChainFees",
        params,
        getContractByCodeHash
      );
    },
    useChainFees: async (
      params: PoapDataTypes.CallMethodParams<"useChainFees">
    ): Promise<PoapDataTypes.CallMethodResult<"useChainFees">> => {
      return callMethod(
        PoapData,
        this,
        "useChainFees",
        params,
        getContractByCodeHash
      );
    },
    withdrawAirdrop: async (
      params: PoapDataTypes.CallMethodParams<"withdrawAirdrop">
    ): Promise<PoapDataTypes.CallMethodResult<"withdrawAirdrop">> => {
      return callMethod(
        PoapData,
        this,
        "withdrawAirdrop",
        params,
        getContractByCodeHash
      );
    },
    getAmountForStorageFees: async (
      params?: PoapDataTypes.CallMethodParams<"getAmountForStorageFees">
    ): Promise<PoapDataTypes.CallMethodResult<"getAmountForStorageFees">> => {
      return callMethod(
        PoapData,
        this,
        "getAmountForStorageFees",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getAmountForChainFees: async (
      params?: PoapDataTypes.CallMethodParams<"getAmountForChainFees">
    ): Promise<PoapDataTypes.CallMethodResult<"getAmountForChainFees">> => {
      return callMethod(
        PoapData,
        this,
        "getAmountForChainFees",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getAmountPoapFees: async (
      params?: PoapDataTypes.CallMethodParams<"getAmountPoapFees">
    ): Promise<PoapDataTypes.CallMethodResult<"getAmountPoapFees">> => {
      return callMethod(
        PoapData,
        this,
        "getAmountPoapFees",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getAmountAirdrop: async (
      params?: PoapDataTypes.CallMethodParams<"getAmountAirdrop">
    ): Promise<PoapDataTypes.CallMethodResult<"getAmountAirdrop">> => {
      return callMethod(
        PoapData,
        this,
        "getAmountAirdrop",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getName: async (
      params?: PoapDataTypes.CallMethodParams<"getName">
    ): Promise<PoapDataTypes.CallMethodResult<"getName">> => {
      return callMethod(
        PoapData,
        this,
        "getName",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getDescription: async (
      params?: PoapDataTypes.CallMethodParams<"getDescription">
    ): Promise<PoapDataTypes.CallMethodResult<"getDescription">> => {
      return callMethod(
        PoapData,
        this,
        "getDescription",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getImage: async (
      params?: PoapDataTypes.CallMethodParams<"getImage">
    ): Promise<PoapDataTypes.CallMethodResult<"getImage">> => {
      return callMethod(
        PoapData,
        this,
        "getImage",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getCurrentSupply: async (
      params?: PoapDataTypes.CallMethodParams<"getCurrentSupply">
    ): Promise<PoapDataTypes.CallMethodResult<"getCurrentSupply">> => {
      return callMethod(
        PoapData,
        this,
        "getCurrentSupply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getMaxSupply: async (
      params?: PoapDataTypes.CallMethodParams<"getMaxSupply">
    ): Promise<PoapDataTypes.CallMethodResult<"getMaxSupply">> => {
      return callMethod(
        PoapData,
        this,
        "getMaxSupply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getMintStartAt: async (
      params?: PoapDataTypes.CallMethodParams<"getMintStartAt">
    ): Promise<PoapDataTypes.CallMethodResult<"getMintStartAt">> => {
      return callMethod(
        PoapData,
        this,
        "getMintStartAt",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getMintEndAt: async (
      params?: PoapDataTypes.CallMethodParams<"getMintEndAt">
    ): Promise<PoapDataTypes.CallMethodResult<"getMintEndAt">> => {
      return callMethod(
        PoapData,
        this,
        "getMintEndAt",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getOrganizer: async (
      params?: PoapDataTypes.CallMethodParams<"getOrganizer">
    ): Promise<PoapDataTypes.CallMethodResult<"getOrganizer">> => {
      return callMethod(
        PoapData,
        this,
        "getOrganizer",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getLocation: async (
      params?: PoapDataTypes.CallMethodParams<"getLocation">
    ): Promise<PoapDataTypes.CallMethodResult<"getLocation">> => {
      return callMethod(
        PoapData,
        this,
        "getLocation",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getEventStartAt: async (
      params?: PoapDataTypes.CallMethodParams<"getEventStartAt">
    ): Promise<PoapDataTypes.CallMethodResult<"getEventStartAt">> => {
      return callMethod(
        PoapData,
        this,
        "getEventStartAt",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getEventEndAt: async (
      params?: PoapDataTypes.CallMethodParams<"getEventEndAt">
    ): Promise<PoapDataTypes.CallMethodResult<"getEventEndAt">> => {
      return callMethod(
        PoapData,
        this,
        "getEventEndAt",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getIsPublic: async (
      params?: PoapDataTypes.CallMethodParams<"getIsPublic">
    ): Promise<PoapDataTypes.CallMethodResult<"getIsPublic">> => {
      return callMethod(
        PoapData,
        this,
        "getIsPublic",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getIsBurnable: async (
      params?: PoapDataTypes.CallMethodParams<"getIsBurnable">
    ): Promise<PoapDataTypes.CallMethodResult<"getIsBurnable">> => {
      return callMethod(
        PoapData,
        this,
        "getIsBurnable",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getLockedUntil: async (
      params?: PoapDataTypes.CallMethodParams<"getLockedUntil">
    ): Promise<PoapDataTypes.CallMethodResult<"getLockedUntil">> => {
      return callMethod(
        PoapData,
        this,
        "getLockedUntil",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getIsOpenPrice: async (
      params?: PoapDataTypes.CallMethodParams<"getIsOpenPrice">
    ): Promise<PoapDataTypes.CallMethodResult<"getIsOpenPrice">> => {
      return callMethod(
        PoapData,
        this,
        "getIsOpenPrice",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getPoapPrice: async (
      params?: PoapDataTypes.CallMethodParams<"getPoapPrice">
    ): Promise<PoapDataTypes.CallMethodResult<"getPoapPrice">> => {
      return callMethod(
        PoapData,
        this,
        "getPoapPrice",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getTokenIdPoap: async (
      params?: PoapDataTypes.CallMethodParams<"getTokenIdPoap">
    ): Promise<PoapDataTypes.CallMethodResult<"getTokenIdPoap">> => {
      return callMethod(
        PoapData,
        this,
        "getTokenIdPoap",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getTokenIdAirdrop: async (
      params?: PoapDataTypes.CallMethodParams<"getTokenIdAirdrop">
    ): Promise<PoapDataTypes.CallMethodResult<"getTokenIdAirdrop">> => {
      return callMethod(
        PoapData,
        this,
        "getTokenIdAirdrop",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getAmountAirdropPerUser: async (
      params?: PoapDataTypes.CallMethodParams<"getAmountAirdropPerUser">
    ): Promise<PoapDataTypes.CallMethodResult<"getAmountAirdropPerUser">> => {
      return callMethod(
        PoapData,
        this,
        "getAmountAirdropPerUser",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getAirdropWhenHasParticipated: async (
      params?: PoapDataTypes.CallMethodParams<"getAirdropWhenHasParticipated">
    ): Promise<
      PoapDataTypes.CallMethodResult<"getAirdropWhenHasParticipated">
    > => {
      return callMethod(
        PoapData,
        this,
        "getAirdropWhenHasParticipated",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getHashedPassword: async (
      params?: PoapDataTypes.CallMethodParams<"getHashedPassword">
    ): Promise<PoapDataTypes.CallMethodResult<"getHashedPassword">> => {
      return callMethod(
        PoapData,
        this,
        "getHashedPassword",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getPrepaidFeesAmount: async (
      params?: PoapDataTypes.CallMethodParams<"getPrepaidFeesAmount">
    ): Promise<PoapDataTypes.CallMethodResult<"getPrepaidFeesAmount">> => {
      return callMethod(
        PoapData,
        this,
        "getPrepaidFeesAmount",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    incrementTotalSupply: async (
      params: PoapDataTypes.SignExecuteMethodParams<"incrementTotalSupply">
    ): Promise<
      PoapDataTypes.SignExecuteMethodResult<"incrementTotalSupply">
    > => {
      return signExecuteMethod(PoapData, this, "incrementTotalSupply", params);
    },
    sendAirdrop: async (
      params: PoapDataTypes.SignExecuteMethodParams<"sendAirdrop">
    ): Promise<PoapDataTypes.SignExecuteMethodResult<"sendAirdrop">> => {
      return signExecuteMethod(PoapData, this, "sendAirdrop", params);
    },
    depositPaidPoap: async (
      params: PoapDataTypes.SignExecuteMethodParams<"depositPaidPoap">
    ): Promise<PoapDataTypes.SignExecuteMethodResult<"depositPaidPoap">> => {
      return signExecuteMethod(PoapData, this, "depositPaidPoap", params);
    },
    claimFunds: async (
      params: PoapDataTypes.SignExecuteMethodParams<"claimFunds">
    ): Promise<PoapDataTypes.SignExecuteMethodResult<"claimFunds">> => {
      return signExecuteMethod(PoapData, this, "claimFunds", params);
    },
    withdrawStorageFees: async (
      params: PoapDataTypes.SignExecuteMethodParams<"withdrawStorageFees">
    ): Promise<
      PoapDataTypes.SignExecuteMethodResult<"withdrawStorageFees">
    > => {
      return signExecuteMethod(PoapData, this, "withdrawStorageFees", params);
    },
    addStorageFees: async (
      params: PoapDataTypes.SignExecuteMethodParams<"addStorageFees">
    ): Promise<PoapDataTypes.SignExecuteMethodResult<"addStorageFees">> => {
      return signExecuteMethod(PoapData, this, "addStorageFees", params);
    },
    useStorageFees: async (
      params: PoapDataTypes.SignExecuteMethodParams<"useStorageFees">
    ): Promise<PoapDataTypes.SignExecuteMethodResult<"useStorageFees">> => {
      return signExecuteMethod(PoapData, this, "useStorageFees", params);
    },
    withdrawChainFees: async (
      params: PoapDataTypes.SignExecuteMethodParams<"withdrawChainFees">
    ): Promise<PoapDataTypes.SignExecuteMethodResult<"withdrawChainFees">> => {
      return signExecuteMethod(PoapData, this, "withdrawChainFees", params);
    },
    addChainFees: async (
      params: PoapDataTypes.SignExecuteMethodParams<"addChainFees">
    ): Promise<PoapDataTypes.SignExecuteMethodResult<"addChainFees">> => {
      return signExecuteMethod(PoapData, this, "addChainFees", params);
    },
    useChainFees: async (
      params: PoapDataTypes.SignExecuteMethodParams<"useChainFees">
    ): Promise<PoapDataTypes.SignExecuteMethodResult<"useChainFees">> => {
      return signExecuteMethod(PoapData, this, "useChainFees", params);
    },
    withdrawAirdrop: async (
      params: PoapDataTypes.SignExecuteMethodParams<"withdrawAirdrop">
    ): Promise<PoapDataTypes.SignExecuteMethodResult<"withdrawAirdrop">> => {
      return signExecuteMethod(PoapData, this, "withdrawAirdrop", params);
    },
    getAmountForStorageFees: async (
      params: PoapDataTypes.SignExecuteMethodParams<"getAmountForStorageFees">
    ): Promise<
      PoapDataTypes.SignExecuteMethodResult<"getAmountForStorageFees">
    > => {
      return signExecuteMethod(
        PoapData,
        this,
        "getAmountForStorageFees",
        params
      );
    },
    getAmountForChainFees: async (
      params: PoapDataTypes.SignExecuteMethodParams<"getAmountForChainFees">
    ): Promise<
      PoapDataTypes.SignExecuteMethodResult<"getAmountForChainFees">
    > => {
      return signExecuteMethod(PoapData, this, "getAmountForChainFees", params);
    },
    getAmountPoapFees: async (
      params: PoapDataTypes.SignExecuteMethodParams<"getAmountPoapFees">
    ): Promise<PoapDataTypes.SignExecuteMethodResult<"getAmountPoapFees">> => {
      return signExecuteMethod(PoapData, this, "getAmountPoapFees", params);
    },
    getAmountAirdrop: async (
      params: PoapDataTypes.SignExecuteMethodParams<"getAmountAirdrop">
    ): Promise<PoapDataTypes.SignExecuteMethodResult<"getAmountAirdrop">> => {
      return signExecuteMethod(PoapData, this, "getAmountAirdrop", params);
    },
    getName: async (
      params: PoapDataTypes.SignExecuteMethodParams<"getName">
    ): Promise<PoapDataTypes.SignExecuteMethodResult<"getName">> => {
      return signExecuteMethod(PoapData, this, "getName", params);
    },
    getDescription: async (
      params: PoapDataTypes.SignExecuteMethodParams<"getDescription">
    ): Promise<PoapDataTypes.SignExecuteMethodResult<"getDescription">> => {
      return signExecuteMethod(PoapData, this, "getDescription", params);
    },
    getImage: async (
      params: PoapDataTypes.SignExecuteMethodParams<"getImage">
    ): Promise<PoapDataTypes.SignExecuteMethodResult<"getImage">> => {
      return signExecuteMethod(PoapData, this, "getImage", params);
    },
    getCurrentSupply: async (
      params: PoapDataTypes.SignExecuteMethodParams<"getCurrentSupply">
    ): Promise<PoapDataTypes.SignExecuteMethodResult<"getCurrentSupply">> => {
      return signExecuteMethod(PoapData, this, "getCurrentSupply", params);
    },
    getMaxSupply: async (
      params: PoapDataTypes.SignExecuteMethodParams<"getMaxSupply">
    ): Promise<PoapDataTypes.SignExecuteMethodResult<"getMaxSupply">> => {
      return signExecuteMethod(PoapData, this, "getMaxSupply", params);
    },
    getMintStartAt: async (
      params: PoapDataTypes.SignExecuteMethodParams<"getMintStartAt">
    ): Promise<PoapDataTypes.SignExecuteMethodResult<"getMintStartAt">> => {
      return signExecuteMethod(PoapData, this, "getMintStartAt", params);
    },
    getMintEndAt: async (
      params: PoapDataTypes.SignExecuteMethodParams<"getMintEndAt">
    ): Promise<PoapDataTypes.SignExecuteMethodResult<"getMintEndAt">> => {
      return signExecuteMethod(PoapData, this, "getMintEndAt", params);
    },
    getOrganizer: async (
      params: PoapDataTypes.SignExecuteMethodParams<"getOrganizer">
    ): Promise<PoapDataTypes.SignExecuteMethodResult<"getOrganizer">> => {
      return signExecuteMethod(PoapData, this, "getOrganizer", params);
    },
    getLocation: async (
      params: PoapDataTypes.SignExecuteMethodParams<"getLocation">
    ): Promise<PoapDataTypes.SignExecuteMethodResult<"getLocation">> => {
      return signExecuteMethod(PoapData, this, "getLocation", params);
    },
    getEventStartAt: async (
      params: PoapDataTypes.SignExecuteMethodParams<"getEventStartAt">
    ): Promise<PoapDataTypes.SignExecuteMethodResult<"getEventStartAt">> => {
      return signExecuteMethod(PoapData, this, "getEventStartAt", params);
    },
    getEventEndAt: async (
      params: PoapDataTypes.SignExecuteMethodParams<"getEventEndAt">
    ): Promise<PoapDataTypes.SignExecuteMethodResult<"getEventEndAt">> => {
      return signExecuteMethod(PoapData, this, "getEventEndAt", params);
    },
    getIsPublic: async (
      params: PoapDataTypes.SignExecuteMethodParams<"getIsPublic">
    ): Promise<PoapDataTypes.SignExecuteMethodResult<"getIsPublic">> => {
      return signExecuteMethod(PoapData, this, "getIsPublic", params);
    },
    getIsBurnable: async (
      params: PoapDataTypes.SignExecuteMethodParams<"getIsBurnable">
    ): Promise<PoapDataTypes.SignExecuteMethodResult<"getIsBurnable">> => {
      return signExecuteMethod(PoapData, this, "getIsBurnable", params);
    },
    getLockedUntil: async (
      params: PoapDataTypes.SignExecuteMethodParams<"getLockedUntil">
    ): Promise<PoapDataTypes.SignExecuteMethodResult<"getLockedUntil">> => {
      return signExecuteMethod(PoapData, this, "getLockedUntil", params);
    },
    getIsOpenPrice: async (
      params: PoapDataTypes.SignExecuteMethodParams<"getIsOpenPrice">
    ): Promise<PoapDataTypes.SignExecuteMethodResult<"getIsOpenPrice">> => {
      return signExecuteMethod(PoapData, this, "getIsOpenPrice", params);
    },
    getPoapPrice: async (
      params: PoapDataTypes.SignExecuteMethodParams<"getPoapPrice">
    ): Promise<PoapDataTypes.SignExecuteMethodResult<"getPoapPrice">> => {
      return signExecuteMethod(PoapData, this, "getPoapPrice", params);
    },
    getTokenIdPoap: async (
      params: PoapDataTypes.SignExecuteMethodParams<"getTokenIdPoap">
    ): Promise<PoapDataTypes.SignExecuteMethodResult<"getTokenIdPoap">> => {
      return signExecuteMethod(PoapData, this, "getTokenIdPoap", params);
    },
    getTokenIdAirdrop: async (
      params: PoapDataTypes.SignExecuteMethodParams<"getTokenIdAirdrop">
    ): Promise<PoapDataTypes.SignExecuteMethodResult<"getTokenIdAirdrop">> => {
      return signExecuteMethod(PoapData, this, "getTokenIdAirdrop", params);
    },
    getAmountAirdropPerUser: async (
      params: PoapDataTypes.SignExecuteMethodParams<"getAmountAirdropPerUser">
    ): Promise<
      PoapDataTypes.SignExecuteMethodResult<"getAmountAirdropPerUser">
    > => {
      return signExecuteMethod(
        PoapData,
        this,
        "getAmountAirdropPerUser",
        params
      );
    },
    getAirdropWhenHasParticipated: async (
      params: PoapDataTypes.SignExecuteMethodParams<"getAirdropWhenHasParticipated">
    ): Promise<
      PoapDataTypes.SignExecuteMethodResult<"getAirdropWhenHasParticipated">
    > => {
      return signExecuteMethod(
        PoapData,
        this,
        "getAirdropWhenHasParticipated",
        params
      );
    },
    getHashedPassword: async (
      params: PoapDataTypes.SignExecuteMethodParams<"getHashedPassword">
    ): Promise<PoapDataTypes.SignExecuteMethodResult<"getHashedPassword">> => {
      return signExecuteMethod(PoapData, this, "getHashedPassword", params);
    },
    getPrepaidFeesAmount: async (
      params: PoapDataTypes.SignExecuteMethodParams<"getPrepaidFeesAmount">
    ): Promise<
      PoapDataTypes.SignExecuteMethodResult<"getPrepaidFeesAmount">
    > => {
      return signExecuteMethod(PoapData, this, "getPrepaidFeesAmount", params);
    },
  };

  async multicall<Calls extends PoapDataTypes.MultiCallParams>(
    calls: Calls
  ): Promise<PoapDataTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends PoapDataTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<PoapDataTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | PoapDataTypes.MultiCallParams
      | PoapDataTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      PoapData,
      this,
      callss,
      getContractByCodeHash
    );
  }
}
