import "std/nft_collection_interface"
Contract PoapCollection(
    factoryContractId: ByteVec,
    nftTemplateId: ByteVec,
    maxSupply: U256,
    mintStartAt: U256,
    mintEndAt: U256,
    oneMintPerAddress: Bool,
    poapPrice: U256,
    tokenIdPoap: ByteVec,
    tokenIdAirdrop: ByteVec,
    amountAirdropPerUser: U256,

    //event properties
    eventImage: ByteVec,
    eventName: ByteVec,
    description: ByteVec,
    organizer: Address,
    location: ByteVec,
    eventStartAt: U256,
    eventEndAt: U256,
    isPublic: Bool,
    isBurnable: Bool,

    mut amountForStorageFees: U256,
    mut amountPoapFees: U256,
    mut totalSupply: U256,
    mut amountAirdrop: U256    
  ) implements INFTCollection {

   event PoapMinted(contractId: ByteVec, nftIndex: U256, caller: Address)
   event PoapParticipated(organizerAddress: Address, poapContractId: ByteVec)

   @using(preapprovedAssets = true, updateFields = true, checkExternalCaller = false, assetsInContract = true)
   pub fn mint(callerAddr: Address) -> (ByteVec) {
     assert!(totalSupply < maxSupply, ErrorCodes.MaxSupplyReached)
     assert!(blockTimeStamp!() >= mintStartAt, ErrorCodes.MintNotStarted)
     assert!(blockTimeStamp!() <= mintEndAt, ErrorCodes.MintEnded)

     let mut caller = callerAddress!()     
     if(isContractAddress!(caller)){ // if called from a contract, need to get the reall caller
        caller = callerAddr
     }

     let organizerAddressHex = convert(toByteVec!(organizer))
     let (initialImmState, initialMutState) = PoapNFT.encodeFields!(selfContractId!(), totalSupply, eventImage, eventName, description, organizerAddressHex, location, eventStartAt, eventEndAt, isPublic, caller, isBurnable, false)
     
     let mut contractPath = toByteVec!(totalSupply)
     if(oneMintPerAddress){
        assert!(!contractExists!(subContractId!(toByteVec!(caller))), ErrorCodes.LimitedMintPerAddress)
        contractPath = toByteVec!(caller)
     }

     let mut payer = caller
     // pay storage fees if there's alph in contract
     if(amountForStorageFees > 0){
        payer = selfAddress!()
        amountForStorageFees = amountForStorageFees - minimalContractDeposit!()
     }

     if(poapPrice > 0){
        transferTokenToSelf!(caller, tokenIdPoap, poapPrice)
        amountPoapFees = amountPoapFees + poapPrice
     }

     if(amountAirdrop >= amountAirdropPerUser){
        transferTokenFromSelf!(caller, tokenIdAirdrop, amountAirdropPerUser)
        amountAirdrop = amountAirdrop - amountAirdropPerUser
     }

     let contractId = copyCreateSubContractWithToken!{payer -> ALPH: minimalContractDeposit!()}(
         contractPath,
         nftTemplateId,
         initialImmState,
         initialMutState,
         1,
         caller
     )

     //emit PoapMinted(contractId, totalSupply, caller)

     totalSupply = totalSupply + 1

     return contractId
   }

   @using(checkExternalCaller = true)
   pub fn setParticipatedPresence(callerAddr: Address, nftIndex: U256, presenceAddressValidate: Address) -> (){
      let mut caller = callerAddress!()
     
      if(isContractAddress!(caller)){
        assert!(callerContractId!() == factoryContractId, ErrorCodes.InvalidCaller)
        caller = callerAddr
      }

      checkCaller!(caller == organizer, ErrorCodes.InvalidCaller)
      let mut poapContractId = zeros!(32)

      if(oneMintPerAddress){
        poapContractId = subContractId!(toByteVec!(presenceAddressValidate))
      } else {
        poapContractId = subContractId!(toByteVec!(nftIndex))
      }

      assert!(contractExists!(poapContractId), ErrorCodes.IncorrectTokenIndex)
      PoapNFT(poapContractId).setParticipated()

      emit PoapParticipated(caller, poapContractId)
   }

    pub fn getCollectionUri() -> ByteVec {
      return b`data:application/json,{"name": "` ++ eventName ++ b`", "description": "`++ description ++ b`", "image": "` ++     eventImage ++ b`"}`
    }
    
    pub fn totalSupply() -> U256 {
        return totalSupply
    }


    pub fn nftByIndex(index: U256) -> INFT {
        checkCaller!(index < totalSupply(), ErrorCodes.IncorrectTokenIndex)
    
        let nftTokenId = subContractId!(toByteVec!(index))
        assert!(contractExists!(nftTokenId), ErrorCodes.NFTNotFound)
    
        return INFT(nftTokenId)
    }

    pub fn nftByAddress(caller: Address) -> INFT {
      assert!(oneMintPerAddress, ErrorCodes.LimitedMintPerAddress)
  
      let nftTokenId = subContractId!(toByteVec!(caller))
      assert!(contractExists!(nftTokenId), ErrorCodes.NFTNotFound)
  
      return INFT(nftTokenId)
  }

    pub fn validateNFT(nftId: ByteVec, nftIndex: U256) -> () {
      let mut expectedTokenContract =  nftByIndex(nftIndex) 
        if (oneMintPerAddress){
          expectedTokenContract =  nftByAddress(callerAddress!())
        }

        assert!(nftId == contractId!(expectedTokenContract), ErrorCodes.NFTNotPartOfCollection)
    }

    pub fn getIsPublic() -> (Bool) {
        return isPublic
    }

    pub fn getAmountForStorageFees() -> U256 {
        return amountForStorageFees
    }

    @using(assetsInContract = true, updateFields = true)
    pub fn claimFunds(amountToClaim: U256) -> () {
        checkCaller!(callerAddress!() == organizer, ErrorCodes.InvalidCaller)
        assert!(amountToClaim <= amountPoapFees, ErrorCodes.NotEnoughAlph)

        transferTokenFromSelf!(organizer, tokenIdPoap, amountToClaim)

        amountPoapFees = amountPoapFees - amountToClaim
    }

    pub fn getPoapPrice() -> (U256,ByteVec) {
        return poapPrice, tokenIdPoap
    }

    pub fn getOrganizer() -> (Address){
      return organizer
    }

    // Converts a byte array to a hexadecimal string. Used to change the token ID to a readable format.
    fn convert(array: ByteVec) -> ByteVec {
      let hexBytes = [b`0`, b`1`, b`2`, b`3`, b`4`, b`5`, b`6`, b`7`, b`8`, b`9`, b`a`, b`b`, b`c`, b`d`, b`e`, b`f`]
      let mut result = #
      for(let mut offset = 0; offset < size!(array); offset = offset + 1) {
          let byte = u256From1Byte!(byteVecSlice!(array, offset, offset + 1)) & 0xFF
          let high = (byte >> 4) & 0x0F
          let low = byte & 0x0F
          result = result ++ hexBytes[high] ++ hexBytes[low]
        }
    
      return result
    }

}
