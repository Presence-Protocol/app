Contract PoapFactory(
    collectionTemplateId: ByteVec,
    poapTemplateId: ByteVec,
    mut numMintedCollection: U256
){

    event EventCreated(contractId: ByteVec, eventName: ByteVec, organizer: Address)
    event PoapMinted(contractId: ByteVec, collectionId: PoapCollection, nftIndex: U256 ,caller: Address)


    @using(preapprovedAssets = true, checkExternalCaller = false, updateFields = true)
    pub fn mintNewCollection(
        imageUri: ByteVec,
        imageSvg: ByteVec,
        maxSupply: U256,
        mintStartAt: U256,
        mintEndAt: U256,

        //event properties
        eventName: ByteVec,
        description: ByteVec,
        location: ByteVec,
        eventStartAt: U256,
        eventEndAt: U256,
    
        totalSupply: U256) -> (ByteVec){
            let caller = callerAddress!()

            let (initialImmState, initialMutState) = PoapCollection.encodeFields!(poapTemplateId,
                imageUri,
                imageSvg,
                maxSupply,
                mintStartAt,
                mintEndAt,
                eventName,
                description,
                convert(toByteVec!(caller)),
                location,
                eventStartAt,
                eventEndAt,
            
                totalSupply)
        
            let contractId = copyCreateContract!{caller -> ALPH: minimalContractDeposit!()}(    
                collectionTemplateId,
                initialImmState,
                initialMutState
            )

            numMintedCollection = numMintedCollection + 1
            emit EventCreated(contractId, eventName, caller)

            return contractId
        
        }
    
    @using(preapprovedAssets = true, checkExternalCaller = false)
    pub fn mintPoap(collection: PoapCollection) -> (){
        let caller = callerAddress!()


        let poapContractId = collection.mint{caller -> ALPH: minimalContractDeposit!()}(caller)
        let collectionTotalSupply = collection.totalSupply()

        emit PoapMinted(poapContractId, collection, collectionTotalSupply, caller)

    }

    pub fn getNumEventsCreated() -> U256{
        return numMintedCollection
    }

    // Converts a byte array to a hexadecimal string. Used to change the token ID to a readable format.
    fn convert(array: ByteVec) -> ByteVec {
        let hexBytes = [b`0`, b`1`, b`2`, b`3`, b`4`, b`5`, b`6`, b`7`, b`8`, b`9`, b`a`, b`b`, b`c`, b`d`, b`e`, b`f`]
        let mut result = #
        for(let mut offset = 0; offset < size!(array); offset = offset + 1) {
           let byte = u256From1Byte!(byteVecSlice!(array, offset, offset + 1)) & 0xFF
           let high = (byte >> 4) & 0x0F
           let low = byte & 0x0F
           result = result ++ hexBytes[high] ++ hexBytes[low]
        }
    
        return result
      }

}