Contract PoapFactory(
    collectionTemplateId: ByteVec,
    poapTemplateId: ByteVec,
    mut numMintedCollection: U256
){

    event EventCreated(contractId: ByteVec, eventName: ByteVec, organizer: Address, isPublic: Bool)
    event PoapMinted(contractId: ByteVec, collectionId: PoapCollection, nftIndex: U256 ,caller: Address, isPublic: Bool)


    @using(preapprovedAssets = true, checkExternalCaller = false, updateFields = true)
    pub fn mintNewCollection(
        maxSupply: U256,
        mintStartAt: U256,
        mintEndAt: U256,
        oneMintPerAddress: Bool,
        poapPrice: U256,
        tokenIdPoap: ByteVec,
        tokenIdAirdrop: ByteVec,
        amountAirdropPerUser: U256,

        //event properties
        eventImage: ByteVec,
        eventName: ByteVec,
        description: ByteVec,
        location: ByteVec,
        eventStartAt: U256,
        eventEndAt: U256,
        isPublic: Bool,
        isBurnable: Bool,

        amountForStorageFees: U256,
        amountPoapFees: U256,
        totalSupply: U256,
        amountAirdrop: U256) -> (ByteVec){
            let caller = callerAddress!()

            let (initialImmState, initialMutState) = PoapCollection.encodeFields!(poapTemplateId,
                maxSupply,
                mintStartAt,
                mintEndAt,
                oneMintPerAddress,
                poapPrice,
                tokenIdPoap,
                tokenIdAirdrop,
                amountAirdropPerUser,
                eventImage,
                eventName,
                description,
                caller,
                location,
                eventStartAt,
                eventEndAt,
                isPublic,
                isBurnable,
                amountForStorageFees,
                amountPoapFees,
                totalSupply,
                amountAirdrop    
            )
            
            let mut amountForStorageFeesInContract = minimalContractDeposit!()
            if(amountForStorageFees > 0){
                assert!(amountForStorageFees >= minimalContractDeposit!(), ErrorCodes.NotEnoughAlph)
                amountForStorageFeesInContract = amountForStorageFeesInContract + amountForStorageFees
            }

            let contractId = copyCreateContract!{caller -> ALPH: amountForStorageFeesInContract, tokenIdAirdrop: amountAirdrop}(    
                collectionTemplateId,
                initialImmState,
                initialMutState
            )

            numMintedCollection = numMintedCollection + 1
            emit EventCreated(contractId, eventName, caller, isPublic)

            return contractId
        
        }
    
    @using(preapprovedAssets = true, checkExternalCaller = false)
    pub fn mintPoap(collection: PoapCollection) -> (){
        let caller = callerAddress!()

        let collectionAmountAlphInContract = collection.getAmountForStorageFees()

        let mut feesStorageAmount = minimalContractDeposit!()
        if(collectionAmountAlphInContract > 0){
            feesStorageAmount = 0
        }

        let (poapPrice, poapTokenId) = collection.getPoapPrice()

        let poapContractId = collection.mint{caller -> ALPH: feesStorageAmount, poapTokenId: poapPrice}(caller)
        let collectionTotalSupply = collection.totalSupply()

        emit PoapMinted(poapContractId, collection, collectionTotalSupply, caller, collection.getIsPublic())

    }

    pub fn getNumEventsCreated() -> U256{
        return numMintedCollection
    }

}